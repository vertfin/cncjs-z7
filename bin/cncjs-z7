#!/usr/bin/env node

var fs = require("fs");
var path = require("path");
var program = require("commander");
var serialport = require("serialport");
var inquirer = require("inquirer");
var pkg = require("../package.json");
var serverMain = require("../index");
// var options = {};

process.on('SIGINT', () => {
    console.log('SIGINT signal received.');
    shutdown();
});

process.on('SIGTERM', () => {
    console.log('SIGTERM signal received.');
    shutdown();
});

const alarm_msg = "Shit";

const { SerialPort } = require('serialport');

const led_port = new SerialPort({
    path: '/dev/ttyS1',
    baudRate: 9600,
    autoOpen: true
});

var shutdown = function() {
    show(" BYE");
};

var showZ = function() {
    var z;
    if (store.controller.state.status) {
        z = parseFloat(store.controller.state.status.wpos.z);
    } else {
        show(" HI ");
        return;
    }
    if (store.locked) {
        show(alarm_msg);
        return;
    }
    // console.log("showZ: " + z);
    var zs = Math.abs(z).toFixed(2);
    zs = zs.replace('.','');
    zs = zs.padStart(4,' ');
    if (z<0.0) {
        zs = '-' + zs.substring(1);
    }
    // console.log("showZS: :" + zs + ": length:"+zs.length);
    show(zs);
}

var reset_led = function() {
    if (led_port.isOpen) {
        led_port.write([0x76]); // occasionally reset
    }
}

var show = function(text) {
    if (led_port.isOpen) {
        if ((store.led_writes % 100)==0) {
            console.log("led_writes " + store.led_writes + ": reseting led");
            reset_led();
        }
        console.log("LED: ",text.substring(0,2)+"."+text.substring(2,4));
        store.led_writes++;
        led_port.write([0x77,0x02]);
        //led_port.write([0x76]);
        led_port.write(text);
    } else {
        console.log("led_port not open");
    }
}

program
    .version(pkg.version)
    .usage("-s <secret> -p <port> [options]")
    .option("-l, --list", "list available ports then exit")
    .option("-s, --secret", "the secret key stored in the ~/.cncjs/cncrc.cfg file")
    .option("-p, --port <port>", "path or name of serial port")
    .option("-b, --baudrate <baudrate>", "baud rate (default: 115200)", 115200)
    .option(
        "--socket-address <address>",
        "socket address or hostname (default: localhost)",
        "localhost"
    )
    .option("--socket-port <port>", "socket port (default: 8000)", 8000)
    .option(
        "--controller-type <type>",
        "controller type: Grbl|Smoothie|TinyG (default: Grbl)",
        "Grbl"
    )
    .option(
        "--access-token-lifetime <lifetime>",
        "access token lifetime in seconds or a time span string (default: 30d)",
        "30d"
    );


program.parse(process.argv);

var options = {
    secret: program.secret,
    port: program.port,
    baudrate: program.baudrate,
    socketAddress: program.socketAddress,
    socketPort: program.socketPort,
    controllerType: program.controllerType,
    accessTokenLifetime: program.accessTokenLifetime,
};

if (options.list) {
    serialport.list().then((ports) => {
        ports.forEach(function(port) {
            console.log(port.path);
        });
    }).catch((err) =>{
        if (err) {
            console.error(err);
            process.exit(1);
        }
    });
    return;
}

var store = {
    controller: {
        state: {},
        settings: {}
    },
    sender: {
        status: {}
    },
    led_writes: 0,
    locked: false,
};

var createServer = function(options) {
    show(" hi ");
    serverMain(options, function(err, socket) {
        // Grbl
        socket.on("Grbl:state", function(state) {
            store.controller.state = state;
            showZ();
        });
        socket.on("Grbl:settings", function(settings) {
            store.controller.settings = settings;
        });

        socket.on("disconnect", function() {
            console.log('Connection closed.');
            reset_led();
            shutdown();
        });
        // Smoothie
        socket.on("Smoothie:state", function(state) {
            store.controller.state = state;
        });
        socket.on("Smoothie:settings", function(settings) {
            store.controller.settings = settings;
        });

        // TinyG
        socket.on("TinyG:state", function(state) {
            store.controller.state = state;
        });
        socket.on("TinyG:settings", function(settings) {
            store.controller.settings = settings;
        });

        // Sender
        socket.on("sender:status", function(data) {
            store.sender.status = data;
        });

        socket.on('serialport:read', function(data) {
            const d = (data || '').trim();
            //console.log("DATA ",d);
            if (data.indexOf('Unlocked')!=-1) {
                store.locked = false;
            }
            if (data.indexOf('ALARM')!=-1) {
                store.locked = true;
            }

        });

        socket.on('serialport:close', function(data) {
          console.log("@serialport:close");
          show("----");
        });

        socket.on('close', function(data) {
          console.log("@close");
          show("----");
        });

    });
};

if (options.port) {
    setTimeout(function() {showZ()}, 500);
    console.log("calling createServer",options);
    createServer(options);
    return;
}

serialport.list().then((ports) => {
    const choices = ports.map(function(port) {
        return port.path;
    });

    inquirer
        .prompt([
            {
                type: "list",
                name: "port",
                message: "Specify which port you want to use?",
                choices: choices
            }
        ])
        .then(function(answers) {
            options.port = answers.port;

            createServer(options);
        });
}).catch((err) =>{
    if (err) {
        console.error(err);
        process.exit(1);
    }
});
